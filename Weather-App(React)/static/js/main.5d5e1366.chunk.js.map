{"version":3,"sources":["Components/Weather.component.jsx","Components/Form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","data","minTemp","maxTemp","icon","console","log","Fragment","CssBaseline","Card","className","CardContent","id","Typography","Variant","color","gutterBottom","variant","component","sys","country","main","temp","toFixed","humidity","feels_like","class","weather","wind","speed","Form","props","onSubmit","loadWeather","TextField","label","name","vlaue","Button","type","App","state","dataObtained","weatherIcon","ThunderStorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","getIcon","rangeID","setState","handleOnClick","e","a","preventDefault","city","target","elements","value","axios","get","resp","temp_max","temp_min","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d5e1366.chunk.js","sourcesContent":["import React from 'react'\r\nimport {CssBaseline,Card,Typography,CardContent} from '@material-ui/core'; \r\nimport \"weather-icons/css/weather-icons.css\"\r\nimport \"./Weather.css\"\r\n\r\nconst Weather = ({data, minTemp, maxTemp,icon}) => {\r\n\r\n\r\n\r\n    console.log(\"aditya\",data)\r\n    return(\r\n            <React.Fragment>\r\n                <CssBaseline />\r\n                    <Card className=\"cards\">\r\n                        <CardContent className=\"cards\" id=\"card-content\">\r\n                            <Typography className=\"title font\" Variant=\"h2\" color=\"textSecondary\" gutterBottom>\r\n                                Weather Application\r\n                            </Typography>\r\n                            <Typography className=\"font\" variant=\"h5\" component=\"h2\">\r\n                                Country-Code: {data.data.sys.country} \r\n                            </Typography>\r\n                            <Typography className=\"color temperature font\" color=\"textSecondary\">\r\n                                Temperature: {(data.data.main.temp - 273).toFixed(2)} <span>&deg;C</span> Humidity: {data.data.main.humidity} \r\n                            </Typography>\r\n                            <Typography className=\"color temperature font\" color=\"textSecondary\">\r\n                                Feels Like: {(data.data.main.feels_like - 273).toFixed(2)} <span>&deg;C</span> Humidity: {data.data.main.humidity} \r\n                            </Typography>\r\n                            <Typography className=\"color temperature font\" color=\"textSecondary\">\r\n                                Max: {maxTemp.toFixed(2)} <span>&deg;C</span> Min: {minTemp.toFixed(2)} <span>&deg;C</span> \r\n                            </Typography>\r\n                            <i  class={icon}></i>.\r\n                            <Typography className=\"wind font\" variant=\"body2\" component=\"p\">\r\n                                Weather: {data.data.weather[0].main}\r\n                            <br />\r\n                                Wind Speed: {data.data.wind.speed}mps\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>    \r\n            </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Weather","import React from 'react'\r\nimport {TextField,Button} from '@material-ui/core'\r\nimport \"./Form.css\"\r\n\r\n\r\n\r\nconst Form = (props) => {\r\n    return(\r\n        <div>\r\n            <form onSubmit={props.loadWeather}>\r\n                <div className=\"city-input\">\r\n                <TextField id=\"filled-secondary\" label=\"Enter City Name\" variant=\"filled\" color=\"secondary\"  name=\"city\" vlaue=\"mumbai\"/>\r\n                </div>\r\n                <div className=\"button-section\">\r\n                    <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\r\n                        Get Weather\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Weather from './Components/Weather.component';\nimport Form from './Components/Form.component';\nimport axios from 'axios';\n\n\n\nclass App extends React.Component{\n\n  state={\n    dataObtained: null,\n    minTemp: null,\n    maxTemp: null,\n    icon:null\n  }\n\n  weatherIcon ={\n    ThunderStorm: \"wi wi-thunderstorm\",\n    Drizzle:\"wi wi-sleet\",\n    Rain:\"wi wi-storm-showers\",\n    Snow:\"wi wi-snow\",\n    Atmosphere:\"wi wi-fog\",\n    Clear:\"wi wi-day-sunny\",\n    Clouds:\"wi wi-day-fog\"\n  }\n\n  getIcon = (rangeID)=>{\n    switch (true) {\n      case rangeID>= 200 && rangeID<=232:\n        this.setState({icon:this.weatherIcon.ThunderStorm})\n        break;\n      case rangeID>= 300 && rangeID<=321:\n        this.setState({icon:this.weatherIcon.Drizzle})\n        break;  \n      case rangeID>= 500 && rangeID<=531:\n        this.setState({icon:this.weatherIcon.Rain})\n        break;\n      case rangeID>= 600 && rangeID<=622:\n        this.setState({icon:this.weatherIcon.Snow})\n        break;\n      case rangeID>= 701 && rangeID<=781:\n        this.setState({icon:this.weatherIcon.Atmosphere})\n        break;\n      case rangeID===800:\n        this.setState({icon:this.weatherIcon.Clear})\n        break;\n      case rangeID>= 801 && rangeID<=804:\n        this.setState({icon:this.weatherIcon.Clouds})\n        break;            \n      default:\n        this.setState({icon:null})\n        break;\n    }\n  } \n\n  handleOnClick = async (e) =>{\n    e.preventDefault();\n    const city = e.target.elements.city.value\n    console.log(city)\n    if(city){\n      let resp = await axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=a09faebc2bcada5945a7f57a8dd76f83`)\n      console.log('xyz',resp)\n      this.setState({\n        dataObtained: resp,\n        maxTemp: (resp.data.main.temp_max - 273),\n        minTemp: (resp.data.main.temp_min - 273)\n      });\n      this.getIcon(resp.data.weather[0].id)\n    } \n  }\n\n  \n  \n  render(){\n    console.log(\"temp\",this.state.icon)\n      return (\n        <div className=\"App\">\n          <Form loadWeather={this.handleOnClick} />\n          {this.state.dataObtained ? <Weather icon={this.state.icon} maxTemp = {this.state.maxTemp} minTemp = {this.state.minTemp} data={this.state.dataObtained} /> : null }\n        </div>  \n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}